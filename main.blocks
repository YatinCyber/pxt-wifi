<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="$W#PE)8|aqHjpDK=wC-=" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="W2L1g#g~2@[Jv7[g*NY)" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace esp8266 {" line1="    // Flag to indicate whether the ESP8266 was initialized successfully." line2="    let esp8266Initialized = false" line3="" line4="    // Buffer for data received from UART." line5="    let rxData = &quot;&quot;" line6="" line7="" line8="" line9="    /**" line10="     * Send AT command and wait for response." line11="     * Return true if expected response is received." line12="     * @param command The AT command without the CRLF." line13="     * @param expected_response Wait for this response." line14="     * @param timeout Timeout in milliseconds." line15="     */" line16="    //% blockHidden=true" line17="    //% blockId=esp8266_send_command" line18="    export function sendCommand(command: string, expected_response: string = null, timeout: number = 100): boolean {" line19="        // Wait a while from previous command." line20="        basic.pause(10)" line21="" line22="        // Flush the Rx buffer." line23="        serial.readString()" line24="        rxData = &quot;&quot;" line25="" line26="        // Send the command and end with &quot;\r\n&quot;." line27="        serial.writeString(command + &quot;\r\n&quot;)" line28="" line29="        // Don't check if expected response is not specified." line30="        if (expected_response == null) {" line31="            return true" line32="        }" line33="" line34="        // Wait and verify the response." line35="        let result = false" line36="        let timestamp = input.runningTime()" line37="        while (true) {" line38="            // Timeout." line39="            if (input.runningTime() - timestamp &gt; timeout) {" line40="                result = false" line41="                break" line42="            }" line43="" line44="            // Read until the end of the line." line45="            rxData += serial.readString()" line46="            if (rxData.includes(&quot;\r\n&quot;)) {" line47="                // Check if expected response received." line48="                if (rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;)).includes(expected_response)) {" line49="                    result = true" line50="                    break" line51="                }" line52="" line53="                // If we expected &quot;OK&quot; but &quot;ERROR&quot; is received, do not wait for timeout." line54="                if (expected_response == &quot;OK&quot;) {" line55="                    if (rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;)).includes(&quot;ERROR&quot;)) {" line56="                        result = false" line57="                        break" line58="                    }" line59="                }" line60="" line61="                // Trim the Rx data before loop again." line62="                rxData = rxData.slice(rxData.indexOf(&quot;\r\n&quot;) + 2)" line63="            }" line64="        }" line65="" line66="        return result" line67="    }" line68="" line69="" line70="" line71="    /**" line72="     * Get the specific response from ESP8266." line73="     * Return the line start with the specific response." line74="     * @param command The specific response we want to get." line75="     * @param timeout Timeout in milliseconds." line76="     */" line77="    //% blockHidden=true" line78="    //% blockId=esp8266_get_response" line79="    export function getResponse(response: string, timeout: number = 100): string {" line80="        let responseLine = &quot;&quot;" line81="        let timestamp2 = input.runningTime()" line82="        while (true) {" line83="            // Timeout." line84="            if (input.runningTime() - timestamp2 &gt; timeout) {" line85="                // Check if expected response received in case no CRLF received." line86="                if (rxData.includes(response)) {" line87="                    responseLine = rxData" line88="                }" line89="                break" line90="            }" line91="" line92="            // Read until the end of the line." line93="            rxData += serial.readString()" line94="            if (rxData.includes(&quot;\r\n&quot;)) {" line95="                // Check if expected response received." line96="                if (rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;)).includes(response)) {" line97="                    responseLine = rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;))" line98="" line99="                    // Trim the Rx data for next call." line100="                    rxData = rxData.slice(rxData.indexOf(&quot;\r\n&quot;) + 2)" line101="                    break" line102="                }" line103="" line104="                // Trim the Rx data before loop again." line105="                rxData = rxData.slice(rxData.indexOf(&quot;\r\n&quot;) + 2)" line106="            }" line107="        }" line108="" line109="        return responseLine" line110="    }" line111="" line112="" line113="" line114="    /**" line115="     * Format the encoding of special characters in the url." line116="     * @param url The url that we want to format." line117="     */" line118="    //% blockHidden=true" line119="    //% blockId=esp8266_format_url" line120="    export function formatUrl(url: string): string {" line121="        url = url.replaceAll(&quot;%&quot;, &quot;%25&quot;)" line122="        url = url.replaceAll(&quot; &quot;, &quot;%20&quot;)" line123="        url = url.replaceAll(&quot;!&quot;, &quot;%21&quot;)" line124="        url = url.replaceAll(&quot;\&quot;&quot;, &quot;%22&quot;)" line125="        url = url.replaceAll(&quot;#&quot;, &quot;%23&quot;)" line126="        url = url.replaceAll(&quot;$&quot;, &quot;%24&quot;)" line127="        url = url.replaceAll(&quot;&amp;&quot;, &quot;%26&quot;)" line128="        url = url.replaceAll(&quot;'&quot;, &quot;%27&quot;)" line129="        url = url.replaceAll(&quot;(&quot;, &quot;%28&quot;)" line130="        url = url.replaceAll(&quot;)&quot;, &quot;%29&quot;)" line131="        url = url.replaceAll(&quot;*&quot;, &quot;%2A&quot;)" line132="        url = url.replaceAll(&quot;+&quot;, &quot;%2B&quot;)" line133="        url = url.replaceAll(&quot;,&quot;, &quot;%2C&quot;)" line134="        url = url.replaceAll(&quot;-&quot;, &quot;%2D&quot;)" line135="        url = url.replaceAll(&quot;.&quot;, &quot;%2E&quot;)" line136="        url = url.replaceAll(&quot;/&quot;, &quot;%2F&quot;)" line137="        url = url.replaceAll(&quot;:&quot;, &quot;%3A&quot;)" line138="        url = url.replaceAll(&quot;;&quot;, &quot;%3B&quot;)" line139="        url = url.replaceAll(&quot;&lt;&quot;, &quot;%3C&quot;)" line140="        url = url.replaceAll(&quot;=&quot;, &quot;%3D&quot;)" line141="        url = url.replaceAll(&quot;&gt;&quot;, &quot;%3E&quot;)" line142="        url = url.replaceAll(&quot;?&quot;, &quot;%3F&quot;)" line143="        url = url.replaceAll(&quot;@&quot;, &quot;%40&quot;)" line144="        url = url.replaceAll(&quot;[&quot;, &quot;%5B&quot;)" line145="        url = url.replaceAll(&quot;\\&quot;, &quot;%5C&quot;)" line146="        url = url.replaceAll(&quot;]&quot;, &quot;%5D&quot;)" line147="        url = url.replaceAll(&quot;^&quot;, &quot;%5E&quot;)" line148="        url = url.replaceAll(&quot;_&quot;, &quot;%5F&quot;)" line149="        url = url.replaceAll(&quot;`&quot;, &quot;%60&quot;)" line150="        url = url.replaceAll(&quot;{&quot;, &quot;%7B&quot;)" line151="        url = url.replaceAll(&quot;|&quot;, &quot;%7C&quot;)" line152="        url = url.replaceAll(&quot;}&quot;, &quot;%7D&quot;)" line153="        url = url.replaceAll(&quot;~&quot;, &quot;%7E&quot;)" line154="        return url" line155="    }" line156="" line157="" line158="" line159="    /**" line160="     * Return true if the ESP8266 is already initialized." line161="     */" line162="    //% weight=30" line163="    //% blockGap=8" line164="    //% blockId=esp8266_is_esp8266_initialized" line165="    //% block=&quot;ESP8266 initialized&quot;" line166="    export function isESP8266Initialized(): boolean {" line167="        return esp8266Initialized" line168="    }" line169="" line170="" line171="" line172="    /**" line173="     * Initialize the ESP8266." line174="     * @param tx Tx pin of micro:bit. eg: SerialPin.P16" line175="     * @param rx Rx pin of micro:bit. eg: SerialPin.P15" line176="     * @param baudrate UART baudrate. eg: BaudRate.BaudRate115200" line177="     */" line178="    //% weight=29" line179="    //% blockGap=40" line180="    //% blockId=esp8266_init" line181="    //% block=&quot;initialize ESP8266: Tx %tx Rx %rx Baudrate %baudrate&quot;" line182="    export function init(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {" line183="        // Redirect the serial port." line184="        serial.redirect(tx, rx, baudrate)" line185="        serial.setTxBufferSize(128)" line186="        serial.setRxBufferSize(128)" line187="" line188="        // Reset the flag." line189="        esp8266Initialized = false" line190="" line191="        // Restore the ESP8266 factory settings." line192="        if (sendCommand(&quot;AT+RESTORE&quot;, &quot;ready&quot;, 5000) == false) return" line193="" line194="        // Turn off echo." line195="        if (sendCommand(&quot;ATE0&quot;, &quot;OK&quot;) == false) return" line196="" line197="        // Initialized successfully." line198="        // Set the flag." line199="        esp8266Initialized = true" line200="    }" line201="" line202="" line203="" line204="    /**" line205="     * Return true if the ESP8266 is connected to WiFi router." line206="     */" line207="    //% weight=28" line208="    //% blockGap=8" line209="    //% blockId=esp8266_is_wifi_connected" line210="    //% block=&quot;WiFi connected&quot;" line211="    export function isWifiConnected(): boolean {" line212="        // Get the connection status." line213="        sendCommand(&quot;AT+CIPSTATUS&quot;)" line214="        let status = getResponse(&quot;STATUS:&quot;, 1000)" line215="" line216="        // Wait until OK is received." line217="        getResponse(&quot;OK&quot;)" line218="" line219="        // Return the WiFi status." line220="        if ((status == &quot;&quot;) || status.includes(&quot;STATUS:5&quot;)) {" line221="            return false" line222="        }" line223="        else {" line224="            return true" line225="        }" line226="    }" line227="" line228="" line229="" line230="    /**" line231="     * Connect to WiFi router." line232="     * @param ssid Your WiFi SSID." line233="     * @param password Your WiFi password." line234="     */" line235="    //% weight=27" line236="    //% blockGap=8" line237="    //% blockId=esp8266_connect_wifi" line238="    //% block=&quot;connect to WiFi: SSID %ssid Password %password&quot;" line239="    export function connectWiFi(ssid: string, password: string) {" line240="        // Set to station mode." line241="        sendCommand(&quot;AT+CWMODE=1&quot;, &quot;OK&quot;)" line242="" line243="        // Connect to WiFi router." line244="        sendCommand(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, &quot;OK&quot;, 20000)" line245="    }" line246="" line247="" line248="" line249="" line250="}" numlines="251"></mutation></block></statement></block></xml>