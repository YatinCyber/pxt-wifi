<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace esp8266 {" line1="    // Flag to indicate whether the ESP8266 was initialized successfully." line2="    let esp8266Initialized = false" line3="    // Buffer for data received from UART." line4="    let rxData = &quot;&quot;" line5="    /**" line6="     * Send AT command and wait for response." line7="     * Return true if expected response is received." line8="     * @param command The AT command without the CRLF." line9="     * @param expected_response Wait for this response." line10="     * @param timeout Timeout in milliseconds." line11="     */" line12="    //% blockHidden=true" line13="    //% blockId=esp8266_send_command" line14="    export function sendCommand(command: string, expected_response: string = null, timeout: number = 100): boolean {" line15="        // Wait a while from previous command." line16="        basic.pause(10)" line17="" line18="        // Flush the Rx buffer." line19="        serial.readString()" line20="        rxData = &quot;&quot;" line21="" line22="        // Send the command and end with &quot;\r\n&quot;." line23="        serial.writeString(command + &quot;\r\n&quot;)" line24="" line25="        // Don't check if expected response is not specified." line26="        if (expected_response == null) {" line27="            return true" line28="        }" line29="" line30="        // Wait and verify the response." line31="        let result = false" line32="        let timestamp = input.runningTime()" line33="        while (true) {" line34="            // Timeout." line35="            if (input.runningTime() - timestamp &gt; timeout) {" line36="                result = false" line37="                break" line38="            }" line39="" line40="            // Read until the end of the line." line41="            rxData += serial.readString()" line42="            if (rxData.includes(&quot;\r\n&quot;)) {" line43="                // Check if expected response received." line44="                if (rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;)).includes(expected_response)) {" line45="                    result = true" line46="                    break" line47="                }" line48="" line49="                // If we expected &quot;OK&quot; but &quot;ERROR&quot; is received, do not wait for timeout." line50="                if (expected_response == &quot;OK&quot;) {" line51="                    if (rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;)).includes(&quot;ERROR&quot;)) {" line52="                        result = false" line53="                        break" line54="                    }" line55="                }" line56="" line57="                // Trim the Rx data before loop again." line58="                rxData = rxData.slice(rxData.indexOf(&quot;\r\n&quot;) + 2)" line59="            }" line60="        }" line61="" line62="        return result" line63="    }" line64="" line65="" line66="" line67="    /**" line68="     * Get the specific response from ESP8266." line69="     * Return the line start with the specific response." line70="     * @param command The specific response we want to get." line71="     * @param timeout Timeout in milliseconds." line72="     */" line73="    //% blockHidden=true" line74="    //% blockId=esp8266_get_response" line75="    export function getResponse(response: string, timeout: number = 100): string {" line76="        let responseLine = &quot;&quot;" line77="        let timestamp2 = input.runningTime()" line78="        while (true) {" line79="            // Timeout." line80="            if (input.runningTime() - timestamp2 &gt; timeout) {" line81="                // Check if expected response received in case no CRLF received." line82="                if (rxData.includes(response)) {" line83="                    responseLine = rxData" line84="                }" line85="                break" line86="            }" line87="" line88="            // Read until the end of the line." line89="            rxData += serial.readString()" line90="            if (rxData.includes(&quot;\r\n&quot;)) {" line91="                // Check if expected response received." line92="                if (rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;)).includes(response)) {" line93="                    responseLine = rxData.slice(0, rxData.indexOf(&quot;\r\n&quot;))" line94="" line95="                    // Trim the Rx data for next call." line96="                    rxData = rxData.slice(rxData.indexOf(&quot;\r\n&quot;) + 2)" line97="                    break" line98="                }" line99="" line100="                // Trim the Rx data before loop again." line101="                rxData = rxData.slice(rxData.indexOf(&quot;\r\n&quot;) + 2)" line102="            }" line103="        }" line104="" line105="        return responseLine" line106="    }" line107="" line108="" line109="" line110="    /**" line111="     * Format the encoding of special characters in the url." line112="     * @param url The url that we want to format." line113="     */" line114="    //% blockHidden=true" line115="    //% blockId=esp8266_format_url" line116="    export function formatUrl(url: string): string {" line117="        url = url.replaceAll(&quot;%&quot;, &quot;%25&quot;)" line118="        url = url.replaceAll(&quot; &quot;, &quot;%20&quot;)" line119="        url = url.replaceAll(&quot;!&quot;, &quot;%21&quot;)" line120="        url = url.replaceAll(&quot;\&quot;&quot;, &quot;%22&quot;)" line121="        url = url.replaceAll(&quot;#&quot;, &quot;%23&quot;)" line122="        url = url.replaceAll(&quot;$&quot;, &quot;%24&quot;)" line123="        url = url.replaceAll(&quot;&amp;&quot;, &quot;%26&quot;)" line124="        url = url.replaceAll(&quot;'&quot;, &quot;%27&quot;)" line125="        url = url.replaceAll(&quot;(&quot;, &quot;%28&quot;)" line126="        url = url.replaceAll(&quot;)&quot;, &quot;%29&quot;)" line127="        url = url.replaceAll(&quot;*&quot;, &quot;%2A&quot;)" line128="        url = url.replaceAll(&quot;+&quot;, &quot;%2B&quot;)" line129="        url = url.replaceAll(&quot;,&quot;, &quot;%2C&quot;)" line130="        url = url.replaceAll(&quot;-&quot;, &quot;%2D&quot;)" line131="        url = url.replaceAll(&quot;.&quot;, &quot;%2E&quot;)" line132="        url = url.replaceAll(&quot;/&quot;, &quot;%2F&quot;)" line133="        url = url.replaceAll(&quot;:&quot;, &quot;%3A&quot;)" line134="        url = url.replaceAll(&quot;;&quot;, &quot;%3B&quot;)" line135="        url = url.replaceAll(&quot;&lt;&quot;, &quot;%3C&quot;)" line136="        url = url.replaceAll(&quot;=&quot;, &quot;%3D&quot;)" line137="        url = url.replaceAll(&quot;&gt;&quot;, &quot;%3E&quot;)" line138="        url = url.replaceAll(&quot;?&quot;, &quot;%3F&quot;)" line139="        url = url.replaceAll(&quot;@&quot;, &quot;%40&quot;)" line140="        url = url.replaceAll(&quot;[&quot;, &quot;%5B&quot;)" line141="        url = url.replaceAll(&quot;\\&quot;, &quot;%5C&quot;)" line142="        url = url.replaceAll(&quot;]&quot;, &quot;%5D&quot;)" line143="        url = url.replaceAll(&quot;^&quot;, &quot;%5E&quot;)" line144="        url = url.replaceAll(&quot;_&quot;, &quot;%5F&quot;)" line145="        url = url.replaceAll(&quot;`&quot;, &quot;%60&quot;)" line146="        url = url.replaceAll(&quot;{&quot;, &quot;%7B&quot;)" line147="        url = url.replaceAll(&quot;|&quot;, &quot;%7C&quot;)" line148="        url = url.replaceAll(&quot;}&quot;, &quot;%7D&quot;)" line149="        url = url.replaceAll(&quot;~&quot;, &quot;%7E&quot;)" line150="        return url" line151="    }" line152="" line153="" line154="" line155="    /**" line156="     * Return true if the ESP8266 is already initialized." line157="     */" line158="    //% weight=30" line159="    //% blockGap=8" line160="    //% blockId=esp8266_is_esp8266_initialized" line161="    //% block=&quot;ESP8266 initialized&quot;" line162="    export function isESP8266Initialized(): boolean {" line163="        return esp8266Initialized" line164="    }" line165="" line166="" line167="" line168="    /**" line169="     * Initialize the ESP8266." line170="     * @param tx Tx pin of micro:bit. eg: SerialPin.P16" line171="     * @param rx Rx pin of micro:bit. eg: SerialPin.P15" line172="     * @param baudrate UART baudrate. eg: BaudRate.BaudRate115200" line173="     */" line174="    //% weight=29" line175="    //% blockGap=40" line176="    //% blockId=esp8266_init" line177="    //% block=&quot;initialize ESP8266: Tx %tx Rx %rx Baudrate %baudrate&quot;" line178="    export function init(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {" line179="        // Redirect the serial port." line180="        serial.redirect(tx, rx, baudrate)" line181="        serial.setTxBufferSize(128)" line182="        serial.setRxBufferSize(128)" line183="" line184="        // Reset the flag." line185="        esp8266Initialized = false" line186="" line187="        // Restore the ESP8266 factory settings." line188="        if (sendCommand(&quot;AT+RESTORE&quot;, &quot;ready&quot;, 5000) == false) return" line189="" line190="        // Turn off echo." line191="        if (sendCommand(&quot;ATE0&quot;, &quot;OK&quot;) == false) return" line192="" line193="        // Initialized successfully." line194="        // Set the flag." line195="        esp8266Initialized = true" line196="    }" line197="" line198="" line199="" line200="    /**" line201="     * Return true if the ESP8266 is connected to WiFi router." line202="     */" line203="    //% weight=28" line204="    //% blockGap=8" line205="    //% blockId=esp8266_is_wifi_connected" line206="    //% block=&quot;WiFi connected&quot;" line207="    export function isWifiConnected(): boolean {" line208="        // Get the connection status." line209="        sendCommand(&quot;AT+CIPSTATUS&quot;)" line210="        let status = getResponse(&quot;STATUS:&quot;, 1000)" line211="" line212="        // Wait until OK is received." line213="        getResponse(&quot;OK&quot;)" line214="" line215="        // Return the WiFi status." line216="        if ((status == &quot;&quot;) || status.includes(&quot;STATUS:5&quot;)) {" line217="            return false" line218="        }" line219="        else {" line220="            return true" line221="        }" line222="    }" line223="" line224="" line225="" line226="    /**" line227="     * Connect to WiFi router." line228="     * @param ssid Your WiFi SSID." line229="     * @param password Your WiFi password." line230="     */" line231="    //% weight=27" line232="    //% blockGap=8" line233="    //% blockId=esp8266_connect_wifi" line234="    //% block=&quot;connect to WiFi: SSID %ssid Password %password&quot;" line235="    export function connectWiFi(ssid: string, password: string) {" line236="        // Set to station mode." line237="        sendCommand(&quot;AT+CWMODE=1&quot;, &quot;OK&quot;)" line238="" line239="        // Connect to WiFi router." line240="        sendCommand(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, &quot;OK&quot;, 20000)" line241="    }" line242="" line243="" line244="" line245="" line246="}" numlines="247"></mutation></block></statement></block></xml>